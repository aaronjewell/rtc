services:
  load-balancer:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      DB_HOST: database
      DB_USER: ${DB_USER}
      DB_PASSWORD_FILE: /run/secrets/db_password
      DB_DATABASE: ${DB_DATABASE}
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      SERVICE_DISCOVERY_HOST: service-discovery:2181
      TEST_USERNAME: ${TEST_USERNAME}
      TEST_PASSWORD: ${TEST_PASSWORD}
      TEST_EMAIL: ${TEST_EMAIL}
    secrets:
      - db_password
      - jwt_secret
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      database:
        condition: service_healthy
      service-discovery:
        condition: service_started

  chat-server:
    build:
      context: ./chat-server
      dockerfile: Dockerfile
    environment:
      KV_STORE_HOST: kv-store
      KV_KEYSPACE: chat_service
      NODE_ENV: ${NODE_ENV}
      PORT: 80
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      KAFKA_BROKER: kafka:9092
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SERVICE_DISCOVERY_HOST: service-discovery:2181
      SERVER_ID: "chat"
    deploy:
      mode: replicated
      replicas: 2
    secrets:
      - jwt_secret
    depends_on:
      chat-server-migrate:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      kv-store:
        condition: service_healthy
      redis:
        condition: service_healthy
      service-discovery:
        condition: service_started

  chat-server-migrate:
    build:
      context: ./chat-server
      dockerfile: Dockerfile.migrate
    environment:
      KV_STORE_HOST: kv-store
      KV_KEYSPACE: chat_service
    depends_on:
      kv-store:
        condition: service_healthy
    restart: "no"  # Run once and exit

  presence-server:
    build:
      context: ./presence-server
      dockerfile: Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: 80
      JWT_SECRET_FILE: /run/secrets/jwt_secret
      KV_STORE_HOST: kv-store
      SERVICE_DISCOVERY_HOST: service-discovery:2181
      SERVER_ID: "presence"
    deploy:
      mode: replicated
      replicas: 2
    secrets:
      - jwt_secret
    depends_on:
      kv-store:
        condition: service_healthy
      service-discovery:
        condition: service_started
      kafka:
        condition: service_healthy

  database:
    image: mysql:8.3
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
      MYSQL_USER: ${DB_USER}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_PASSWORD_FILE: /run/secrets/db_password
    ports:
      - "3306:3306"
    secrets:
       - db_root_password
       - db_password
    healthcheck:
      test: ["CMD-SHELL", "exit | mysql -h localhost -P 3306 -u $$MYSQL_USER -p$$(cat $$MYSQL_ROOT_PASSWORD_FILE)" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - mysql-data:/var/lib/mysql

  kv-store:
    image: cassandra:latest
    ports:
      - "9042:9042"
    volumes:
      - cassandra-data:/var/lib/cassandra
    environment:
      - CASSANDRA_CLUSTER_NAME=chat_cluster
      - CASSANDRA_ENDPOINT_SNITCH=SimpleSnitch
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "SELECT now() FROM system.local;"]
      interval: 15s
      timeout: 5s
      retries: 10

  service-discovery:
    image: zookeeper:3.8
    environment:
      - ZOO_MY_ID=1
      - ZOO_SERVERS=server.1=zookeeper:2888:3888;2181
    volumes:
      - zookeeper-data:/data
      - zookeeper-datalog:/datalog

  zookeeper-kafka:
    image: bitnami/zookeeper:latest
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    volumes:
      - zookeeper-kafka-data:/bitnami
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-kafka:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      ALLOW_PLAINTEXT_LISTENER: yes
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/bitnami
    depends_on:
      zookeeper-kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  kafka-setup:
    image: confluentinc/cp-kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c '
        echo "Waiting for Kafka to be ready..." &&
        /usr/bin/kafka-topics --create --if-not-exists \
          --bootstrap-server kafka:9092 \
          --topic chat-messages \
          --partitions 12 \
          --replication-factor 1 \
          --config cleanup.policy=delete \
          --config retention.ms=3600000 \
          --config retention.bytes=524288000 \
          --config delete.retention.ms=60000 \
          --config min.compaction.lag.ms=0 \
          --config segment.ms=300000 \
          --config message.timestamp.type=CreateTime'

  message-dispatcher:
    build:
      context: ./message-dispatcher
      dockerfile: Dockerfile
    environment:
      KAFKA_BROKER: kafka:9092
      REDIS_HOST: redis
      SERVICE_DISCOVERY_HOST: service-discovery:2181
    depends_on:
      kafka-setup:
        condition: service_completed_successfully
      redis:
        condition: service_healthy

  redis:
    image: redis:6
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

secrets:
  db_root_password:
    file: ./secrets/db_root_password.txt
  db_password:
    file: ./secrets/db_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt

volumes:
  cassandra-data:
  mysql-data:
  zookeeper-data:
  zookeeper-datalog:
  zookeeper-kafka-data:
  kafka-data:
  redis-data:
